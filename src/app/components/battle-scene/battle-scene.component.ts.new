import { Component, Input, OnChanges, SimpleChanges, OnInit } from '@angular/core';
import { PokemonType } from 'src/app/models/pokemon-type';

export interface BattlePokemon {
  id: string;
  name: string;
  life?: number;
  life_before: number;
  life_after: number;
  power?: number;
  type?: PokemonType | string;
  image?: string;
}

export interface BattleRound {
  round: number;
  team1_pokemon: BattlePokemon;
  team2_pokemon: BattlePokemon;
  logs?: string[];
}

export interface BattleResult {
  winner_team_id: string;
  rounds: BattleRound[];
}

export interface TeamData {
  id: string;
  name: string;
  pokemons: BattlePokemon[];
}

@Component({
  selector: 'app-battle-scene',
  templateUrl: './battle-scene.component.html',
  styleUrls: ['./battle-scene.component.css']
})
export class BattleSceneComponent implements OnChanges, OnInit {
  @Input() set battleRounds(value: BattleRound[]) {
    this._battleRounds = value || [];
    if (this._battleRounds.length > 0) {
      this.currentRound = 0;
      this.playNextRound();
    }
  }
  get battleRounds(): BattleRound[] {
    return this._battleRounds;
  }
  private _battleRounds: BattleRound[] = [];
  
  @Input() team1: TeamData | null = null;
  @Input() team2: TeamData | null = null;
  
  currentRound: number = 0;
  currentBattle: BattleRound | null = null;
  battleInProgress: boolean = false;
  battleEnded: boolean = false;
  winner: string | null = null;

  ngOnInit(): void {
    if (this.battleRounds && this.battleRounds.length > 0 && !this.battleInProgress && !this.battleEnded) {
      this.startBattle();
    }
  }

  ngOnChanges(changes: SimpleChanges): void {
    if (changes['battleRounds'] && this.battleRounds && this.battleRounds.length > 0) {
      this.battleInProgress = false;
      this.battleEnded = false;
      this.currentRound = 0;
      this.currentBattle = null;
      this.winner = null;
      
      setTimeout(() => {
        this.startBattle();
      }, 100);
    }
  }

  startBattle(): void {
    if (!this.battleRounds || this.battleRounds.length === 0) {
      console.error('No battle rounds available');
      return;
    }
    
    this.battleInProgress = true;
    this.battleEnded = false;
    this.currentRound = 0;
    this.playNextRound();
  }

  playNextRound(): void {
    if (!this.battleRounds || this.currentRound >= this.battleRounds.length) {
      this.determineWinner();
      return;
    }

    this.currentBattle = this.battleRounds[this.currentRound];
    this.currentRound++;

    // Update team pokemon states
    if (this.team1 && this.currentBattle.team1_pokemon) {
      const pokemon = this.team1.pokemons.find(p => p.id === this.currentBattle?.team1_pokemon.id);
      if (pokemon) {
        pokemon.life_after = this.currentBattle.team1_pokemon.life_after;
      }
    }

    if (this.team2 && this.currentBattle.team2_pokemon) {
      const pokemon = this.team2.pokemons.find(p => p.id === this.currentBattle?.team2_pokemon.id);
      if (pokemon) {
        pokemon.life_after = this.currentBattle.team2_pokemon.life_after;
      }
    }

    // Auto-play next round after a delay
    if (this.currentRound < this.battleRounds.length) {
      setTimeout(() => {
        this.playNextRound();
      }, 2000);
    } else {
      this.determineWinner();
    }
  }

  determineWinner(): void {
    if (!this.team1 || !this.team2) {
      console.error('Teams not available to determine winner');
      return;
    }
    
    const team1Remaining = this.team1.pokemons.filter(p => (p.life_after || 0) > 0).length;
    const team2Remaining = this.team2.pokemons.filter(p => (p.life_after || 0) > 0).length;
    
    if (team1Remaining > 0 && team2Remaining === 0) {
      this.winner = this.team1.name;
    } else if (team2Remaining > 0 && team1Remaining === 0) {
      this.winner = this.team2.name;
    } else {
      this.winner = 'Draw';
    }
    
    this.battleInProgress = false;
    this.battleEnded = true;
  }

  // Helper methods for template
  getHealthPercentage(pokemon: BattlePokemon): number {
    if (!pokemon) return 0;
    const current = pokemon.life_after || 0;
    const max = pokemon.life || pokemon.life_before || 100;
    return Math.max(0, Math.min(100, (current / max) * 100));
  }

  getCurrentLife(pokemon: BattlePokemon): number {
    return pokemon?.life_after || 0;
  }

  getMaxLife(pokemon: BattlePokemon): number {
    return pokemon?.life || pokemon?.life_before || 0;
  }

  getPokemonImage(pokemon: BattlePokemon): string {
    return pokemon?.image || 'assets/default-pokemon.png';
  }
}
